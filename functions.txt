PYTHON FUNCTIONS

database_wrapper.py
def st2int(array):

def int2st(array):

def smallest_free(array):

def reformat(*args):

def reset_locations():


database_wrapper_barel.py
def st2int(array):

def int2st(array):

def smallest_free(array):

def reformat(*args):

def main():


get_query_results.py
def find_places(loc=(31.904052, 34.815355), radius=2_000, place_type="restaurant", limit=-1):

def decode_polyline(polyline_str):

def distance(a, b):

def calculate_error(clusters):

def recenter_centroids(centroids):

def display_points(values, centroids):

def find_elbow(points):

get_intersection(a, b):

def get_color(target, clusters, add):


main.py
def filter_dict(d, f):

def parse_chat_command(command, chat_id):

def emit_to_everyone(**kwargs):

def emit_to_party(member, **kwargs):

def random_location():

def get_party_members(username):

def create_party(user, members=None):

def join_party(owner, username):

def disconnect_user_from_party(user, chat_is_disbanded=False):

def login():

def fav():

def get_party_chat_id(user):

def parse_action(command):

def get_messages(user):

def register():

def emit_to(user: str, event_name: str, namespace: str = '/comms', message=None, verbose=True):

def main_page():

def friends_func():

def logout():

def broadcast_userdiff():

def update_destination(data, user):

def arrived():

def destination_update_request(data):

def get_place_recommendation_location(tp, radius, limit):

def check_ping(*args):

def location_recommendation_request():

def send_message_to_party(member, message, author="(System)"):

def send_path_to_party(user_to_track):

def return_path(data):

def return_path(data):

def try_reset_first(user):

def step():

def knn_select_user(selected_user):

def party_coords(username):

def get_coords_of_party():

def get_all_user_chats(target):

def notification_parse(data):

def create_chat(*, name: str, members: list = None) -> str:

def confirm_chat(chat_id):

def confirm_delete_chat(chat_id):

def logged_on_users():

def get_party_memb():

def get_online_memb():

def send_user_added_locations(username):

def get_user_added_loc():

def reset_locs():

def interest(data):

def disconnect_event():

def invite_user(receiver):

def suggest_party(users):

def add_location_func(data):

def get_destination():

def get_party_leader(username):

def set_user_location(username, lat, lng):

def chat_message(data):

def my_location(data):


remade_main.py

def filter_dict(d, f):

def get_all_user_chats(target):

def suggest_party(users):

def get_place_recommendation_location(tp, radius, limit):

def create_chat(*, name: str, party_members: list = None) -> str:

def separate_into_colours(group_owners):

def create_party(user, members_to_add=None):

def time_now():

def get_party_leader(username):

def get_messages(user):

def get_party_members(username):

def split_interests(input_str):

def prepare_kmeans_values():

def emit_to(user: str, event_name: str, message=None, namespace: str = '/comms', verbose=True):

def emit_to_everyone(**kwargs):

def emit_to_party(member, **kwargs):

def send_user_added_locations(username):

def party_coords(username):

def disconnect_user_from_party(user, chat_is_disbanded=False):

def update_destination(data, user):

def start_vote_on_place(leader, location_data):

def parse_chat_command(command, chat_id):

def main_page():

def register():

def login():

def logout():

def get_party_chat_id(user):

def send_message_to_party(member, message, author="(System)"):

def parse_action(command):

def send_path_to_party(user_to_track):

def join_party(owner, username):

def broadcast_user_difference():

def logged_on_users():

def return_path(data):

def check_ping(data):

def check_ping(online_users):

def invite_user(receiver):

def add_location_func(data):

def chat_message(data):

def notification_parse(data):

def get_user_added_loc():

def emit_party_members():

def get_online_memb():

def get_destination():

def get_coords_of_party():

def confirm_chat(chat_id):

def confirm_delete_chat(chat_id):

def my_location(data):

def arrived():

def suggest_admin_event():

def destination_update_request(data):

def disconnect_event():






JS FUNCTIONS
ac.js
function filter_users(target){

function autocomplete(inp) {

function addActive(x) {

function removeActive(x) {

function closeAllLists(elmnt) {


chat.js
function openChatTab(target_tab) {

function update_tabs(){

function loadChat(room){


icons.js
function get_icon(name){


loadscripts.js
function seq (arr, callback, index) {

function scriptsDone () {

function insertScript ($script, callback) {

function runScripts ($container) {


maplogic.js
function initMap() {

function update_user(data){

function distance(lat1, lng1, lat2, lng2){

function move_towards_next_point() {

function color_dot_link(colour){

function calculateAndDisplayRoute(

function attachInstructionText(stepDisplay, marker, text, map) {


socket.js
function update_party_members(data){

function ping_every_second(){

function addtofriends(name, online){
